//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Intertoll.PCS.DataIntergration.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PCSDataIntergrationEntities : DbContext
    {
        public PCSDataIntergrationEntities()
            : base("name=PCSDataIntergrationEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<StaffLogin> StaffLogins { get; set; }
        public virtual DbSet<HourlyAudit> HourlyAudits { get; set; }
        public virtual DbSet<ProcessedItem> ProcessedItems { get; set; }
        public virtual DbSet<StaffIdToGuidMapping> StaffIdToGuidMappings { get; set; }
        public virtual DbSet<Lane> Lanes { get; set; }
        public virtual DbSet<TariffMapping> TariffMappings { get; set; }
        public virtual DbSet<PaymentGroupsMapping> PaymentGroupsMappings { get; set; }
        public virtual DbSet<PaymentMechMapping> PaymentMechMappings { get; set; }
        public virtual DbSet<PaymentMethodsMapping> PaymentMethodsMappings { get; set; }
        public virtual DbSet<PaymentTypesMapping> PaymentTypesMappings { get; set; }
        public virtual DbSet<Incident> Incidents { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
    
        public virtual ObjectResult<uspAccountUserDetailsGet_Result> uspAccountUserDetailsGet(string accountUserIdentifier)
        {
            var accountUserIdentifierParameter = accountUserIdentifier != null ?
                new ObjectParameter("AccountUserIdentifier", accountUserIdentifier) :
                new ObjectParameter("AccountUserIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAccountUserDetailsGet_Result>("uspAccountUserDetailsGet", accountUserIdentifierParameter);
        }
    
        public virtual ObjectResult<uspSessionsGet_Result> uspSessionsGet(string laneCode)
        {
            var laneCodeParameter = laneCode != null ?
                new ObjectParameter("LaneCode", laneCode) :
                new ObjectParameter("LaneCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSessionsGet_Result>("uspSessionsGet", laneCodeParameter);
        }
    
        public virtual ObjectResult<uspGetSessionAfter_Result> uspGetSessionAfter(string laneCode, Nullable<System.DateTime> transactionTime)
        {
            var laneCodeParameter = laneCode != null ?
                new ObjectParameter("LaneCode", laneCode) :
                new ObjectParameter("LaneCode", typeof(string));
    
            var transactionTimeParameter = transactionTime.HasValue ?
                new ObjectParameter("TransactionTime", transactionTime) :
                new ObjectParameter("TransactionTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSessionAfter_Result>("uspGetSessionAfter", laneCodeParameter, transactionTimeParameter);
        }
    
        public virtual ObjectResult<uspGetSessionBefore_Result> uspGetSessionBefore(string laneCode, Nullable<System.DateTime> transactionTime)
        {
            var laneCodeParameter = laneCode != null ?
                new ObjectParameter("LaneCode", laneCode) :
                new ObjectParameter("LaneCode", typeof(string));
    
            var transactionTimeParameter = transactionTime.HasValue ?
                new ObjectParameter("TransactionTime", transactionTime) :
                new ObjectParameter("TransactionTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSessionBefore_Result>("uspGetSessionBefore", laneCodeParameter, transactionTimeParameter);
        }
    
        public virtual ObjectResult<uspIncidentsGet_Result> uspIncidentsGet(Nullable<System.DateTime> startDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspIncidentsGet_Result>("uspIncidentsGet", startDateParameter);
        }
    
        public virtual int uspUpdateTransactionIncidentSession(Nullable<System.Guid> oldSessionGUID, Nullable<System.Guid> newSessionGUID)
        {
            var oldSessionGUIDParameter = oldSessionGUID.HasValue ?
                new ObjectParameter("OldSessionGUID", oldSessionGUID) :
                new ObjectParameter("OldSessionGUID", typeof(System.Guid));
    
            var newSessionGUIDParameter = newSessionGUID.HasValue ?
                new ObjectParameter("NewSessionGUID", newSessionGUID) :
                new ObjectParameter("NewSessionGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateTransactionIncidentSession", oldSessionGUIDParameter, newSessionGUIDParameter);
        }
    
        public virtual ObjectResult<uspGetSessionsToSlice_Result> uspGetSessionsToSlice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSessionsToSlice_Result>("uspGetSessionsToSlice");
        }
    
        public virtual int uspUpdateIncident(Nullable<System.Guid> incidentGUID, Nullable<System.Guid> newStaffLoginGUID, ObjectParameter result)
        {
            var incidentGUIDParameter = incidentGUID.HasValue ?
                new ObjectParameter("IncidentGUID", incidentGUID) :
                new ObjectParameter("IncidentGUID", typeof(System.Guid));
    
            var newStaffLoginGUIDParameter = newStaffLoginGUID.HasValue ?
                new ObjectParameter("NewStaffLoginGUID", newStaffLoginGUID) :
                new ObjectParameter("NewStaffLoginGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateIncident", incidentGUIDParameter, newStaffLoginGUIDParameter, result);
        }
    
        public virtual int uspUpdateTransaction(Nullable<System.Guid> transactionGUID, Nullable<System.Guid> newSessionGUID, ObjectParameter result)
        {
            var transactionGUIDParameter = transactionGUID.HasValue ?
                new ObjectParameter("TransactionGUID", transactionGUID) :
                new ObjectParameter("TransactionGUID", typeof(System.Guid));
    
            var newSessionGUIDParameter = newSessionGUID.HasValue ?
                new ObjectParameter("NewSessionGUID", newSessionGUID) :
                new ObjectParameter("NewSessionGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateTransaction", transactionGUIDParameter, newSessionGUIDParameter, result);
        }
    
        public virtual ObjectResult<uspHourlyAuditsGet_Result> uspHourlyAuditsGet(Nullable<System.DateTime> auditDate, Nullable<int> auditHour)
        {
            var auditDateParameter = auditDate.HasValue ?
                new ObjectParameter("AuditDate", auditDate) :
                new ObjectParameter("AuditDate", typeof(System.DateTime));
    
            var auditHourParameter = auditHour.HasValue ?
                new ObjectParameter("AuditHour", auditHour) :
                new ObjectParameter("AuditHour", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspHourlyAuditsGet_Result>("uspHourlyAuditsGet", auditDateParameter, auditHourParameter);
        }
    
        public virtual ObjectResult<uspIncidentTypesGet_Result> uspIncidentTypesGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspIncidentTypesGet_Result>("uspIncidentTypesGet");
        }
    
        public virtual int uspLaneTcpAliveMessage(Nullable<System.Guid> laneGUID, Nullable<System.DateTime> lastAlive)
        {
            var laneGUIDParameter = laneGUID.HasValue ?
                new ObjectParameter("LaneGUID", laneGUID) :
                new ObjectParameter("LaneGUID", typeof(System.Guid));
    
            var lastAliveParameter = lastAlive.HasValue ?
                new ObjectParameter("LastAlive", lastAlive) :
                new ObjectParameter("LastAlive", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLaneTcpAliveMessage", laneGUIDParameter, lastAliveParameter);
        }
    
        public virtual ObjectResult<uspTransactionGet_Result> uspTransactionGet(Nullable<System.DateTime> startDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTransactionGet_Result>("uspTransactionGet", startDateParameter);
        }
    }
}
